############################################################
# +------------------------------------------------------+ #
# |                        Data                          | #
# +------------------------------------------------------+ #
############################################################

#YAML or MySQL
storageType: YAML

#Only necessary if using MySQL
connection:
  hostname: localhost
  port: '3306'
  database: minecraft
  username: root
  password: root


############################################################
# +------------------------------------------------------+ #
# |                       General                        | #
# +------------------------------------------------------+ #
############################################################

#Should all playtime (even from before this plugin was installed) be counted in the /playtime command?
#This feature is limited to the playtime saved in Minecraft's player-data files.
#Requires Minecraft 1.13+.
countPreviousTowardsPlaytime: true

#What rewards should be included in the GUI?
#Options:
#   ELIGIBLE: All rewards the player is eligible for.
#   FINISHED: All rewards the player has already claimed and cannot earn again.
#   INELIGIBLE: All rewards the player is ineligible for.
includedRewards:
- ELIGIBLE
- FINISHED

#How should rewards be ordered in the rewards GUI?
#A list of options can be given which will determine the order of the rewards in the GUI.
#E.g. (default ordering): rewards will be ordered by pending_reversed first, then by status, then by time_left and as last by title
#Options:
#   FILENAME: Compare rewards by file name alphabetically (a->z)
#   FILENAME_REVERSED: Compare rewards by file name reversed alphabetically (z->a)
#   TITLE: Compare rewards by display title alphabetically (a->z)
#   TITLE_REVERSED: Compare rewards by display title reversed alphabetically (z->a)
#   STATUS: Compare rewards by status (INELIGIBLE -> ELIGIBLE ->  FINISHED)
#   STATUS_REVERSED: Compare rewards by reversed status (FINISHED -> ELIGIBLE -> INELIGIBLE)
#   TIME_REQUIRED: Compare rewards by time required ascending (0 -> n)
#   TIME_REQUIRED_REVERSED: Compare rewards by time required descending (n -> 0)
#   TIME_LEFT: Compare rewards by time left ascending (0 -> n)
#   TIME_LEFT_REVERSED: Compare rewards by time left descending (n -> 0)
#   PENDING: Compare rewards by amount pending ascending (0 -> n)
#   PENDING_REVERSED: Compare rewards by amount pending descending (n -> 0)
#   REDEEMED: Compare rewards by amount redeemed ascending (0 -> n)
#   REDEEMED_REVERSED: Compare rewards by amount redeemed descending (n -> 0)
rewardsOrdering:
- PENDING_REVERSED
- STATUS
- TIME_LEFT
- TITLE

#How many players should be included in the top playtime and top afk time commands?
topCommandsLimit: 10

#What time unit should time displays be limited to?
#Options: WEEKS / DAYS / HOURS / MINUTES / SECONDS
#E.g.: If limit is set to MINUTES all time will be displayed as x minutes, x seconds.
#E.g. 2: If limit is set to WEEKS all time will be displayed as x weeks, x days, x hours, x minutes, x seconds.
timeUnitLimit: DAYS


############################################################
# +------------------------------------------------------+ #
# |                         GUIs                         | #
# +------------------------------------------------------+ #
############################################################

#======================--- TITLES ---=======================

#What title should the /rewards GUI have?
#Placeholders: %player%
rewardsInterfaceTitle: '%player% Rewards'


#======================--- ITEMS ---========================

#What should the filler item for GUI's look like?
fillerDisplay:
  material: gray_stained_glass_pane
  name: ' '
  lore: []
  amount: 1

#What should the accent item for GUI's look like?
accentDisplay:
  material: light_blue_stained_glass_pane
  name: ' '
  lore: []
  amount: 1

#What should the next button for paged GUI's look like?
nextPageDisplay:
  material: arrow
  #Placeholders: %current_page% - %total_pages% - %next_page%
  name: '&eNext Page &6&l>>'
  lore: []
  amount: 1

#What should the next button for paged GUI's look like?
previousPageDisplay:
  material: arrow
  #Placeholders: %current_page% - %total_pages% - %previous_page%
  name: '&6&l<< &ePrevious Page'
  lore: []
  amount: 1

#What should the page information item for paged GUI's look like?
pageInformationDisplay:
  material: paper
  #Placeholders: %current_page% - %total_pages%
  name: '&ePage &6%current_page% &eof &6%total_pages%'
  lore: []
  amount: 1
